
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Local Community Event Portal</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9Oq+PHhLWgxfKTRIcfu0JTxR+EQDz/bgldoPjN02XjorXQ7rNb" crossorigin="anonymous">

    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="bootstrap-custom.css">

</head>
<body>

    <nav class="navbar navbar-expand-lg navbar-dark bg-primary shadow-sm">
        <div class="container-fluid">
            <a class="navbar-brand fw-bold" href="#home">Community Portal</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="#home">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#events">Events</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#contact">Register</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="help.html" target="_blank">Help</a>
                    </li>
                </ul>
                <form class="d-flex" role="search">
                    <input class="form-control me-2" type="search" placeholder="Search events..." aria-label="Search">
                    <button class="btn btn-outline-light" type="submit">Search</button>
                </form>
            </div>
        </div>
    </nav>

    <main class="container my-4"> <section id="home" class="mb-5">
            <div id="welcomeBanner" class="p-5 text-center bg-info bg-gradient text-white rounded shadow-lg"> <h1 class="display-4 fw-bold mb-3">Welcome to the Community Portal</h1> <p class="lead mb-3">Enjoy our upcoming local events!</p> <p><span class="text-warning fw-bold">Special Offer: 50% Off!</span></p> </div>
        </section>

        <section id="events" class="mb-5 p-4 bg-light rounded shadow-sm">
            <h2 class="text-center text-primary mb-4">Past Event Highlights</h2>

            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 justify-content-center"> <div class="col">
                    <div class="card h-100 shadow-sm"> <img src="https://via.placeholder.com/400x250/FF5733/FFFFFF?text=Music+Fest" class="card-img-top" alt="Music Fest" title="Music Fest" ondblclick="enlargeImage(this)"/>
                        <div class="card-body">
                            <h5 class="card-title text-uppercase">Music Fest</h5> <p class="card-text text-muted">A vibrant celebration of local musical talents.</p> <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#eventDetailsModal" data-event-name="Music Fest">Details</button> </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <img src="https://via.placeholder.com/400x250/33FF57/FFFFFF?text=Art+Fair" class="card-img-top" alt="Art Fair" title="Art Fair" ondblclick="enlargeImage(this)"/>
                        <div class="card-body">
                            <h5 class="card-title text-capitalize">Art Fair</h5> <p class="card-text text-muted">Explore diverse artistic expressions from our community.</p>
                            <button type="button" class="btn btn-sm btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#eventDetailsModal" data-event-name="Art Fair">Details</button>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <img src="https://via.placeholder.com/400x250/5733FF/FFFFFF?text=Tech+Expo" class="card-img-top" alt="Tech Expo" title="Tech Expo" ondblclick="enlargeImage(this)"/>
                        <div class="card-body">
                            <h5 class="card-title text-lowercase">Tech Expo</h5> <p class="card-text text-muted">Innovations and breakthroughs presented by local tech enthusiasts.</p>
                            <button type="button" class="btn btn-sm btn-outline-success" data-bs-toggle="modal" data-bs-target="#eventDetailsModal" data-event-name="Tech Expo">Details</button>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <img src="https://via.placeholder.com/400x250/FFC300/FFFFFF?text=Food+Carnival" class="card-img-top" alt="Food Carnival" title="Food Carnival" ondblclick="enlargeImage(this)"/>
                        <div class="card-body">
                            <h5 class="card-title">Food Carnival</h5>
                            <p class="card-text text-muted">A culinary journey featuring local delicacies and treats.</p>
                            <button type="button" class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#eventDetailsModal" data-event-name="Food Carnival">Details</button>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <img src="https://via.placeholder.com/400x250/33C3FF/FFFFFF?text=Comm+Parade" class="card-img-top" alt="Community Parade" title="Community Parade" ondblclick="enlargeImage(this)"/>
                        <div class="card-body">
                            <h5 class="card-title">Community Parade</h5>
                            <p class="card-text text-muted">Join us for our annual parade, a showcase of community spirit.</p>
                            <button type="button" class="btn btn-sm btn-outline-info" data-bs-toggle="modal" data-bs-target="#eventDetailsModal" data-event-name="Community Parade">Details</button>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <div class="row g-4 mb-5">
            <div class="col-md-9 order-md-2"> <section id="contact" class="p-4 bg-light rounded shadow-sm">
                    <h2 class="text-center text-primary mb-4">Register for an Event</h2>
                    <form id="registration-form">
                        <div class="mb-3">
                            <label for="name" class="form-label">Your Name</label>
                            <input type="text" class="form-control" id="name" name="name" placeholder="Your Name" required autofocus>
                            <span class="error-message text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Your Email</label>
                            <input type="email" class="form-control" id="email" name="email" placeholder="Your Email" required>
                            <span class="error-message text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label for="phone" class="form-label">Phone (10 digits)</label>
                            <input type="tel" class="form-control" id="phone" name="phone" placeholder="Phone (10 digits)" onblur="validatePhone(this)">
                        </div>
                        <div class="mb-3">
                            <label for="date" class="form-label">Event Date</label>
                            <input type="date" class="form-control" id="date" name="date" required>
                        </div>
                        <div class="mb-3">
                            <label for="eventType" class="form-label">Select Event</label>
                            <select class="form-select" id="eventType" name="eventType" onchange="showFee(this)">
                                <option value="">--Select Event--</option>
                                </select>
                            <span class="error-message text-danger"></span>
                        </div>
                        <p id="fee" class="mb-3">Fee: N/A</p>
                        <div class="mb-3">
                            <label for="message" class="form-label">Your message...</label>
                            <textarea class="form-control" id="message" name="message" rows="3" placeholder="Your message..." onkeyup="countChars(this)"></textarea>
                            <p id="charCount" class="form-text">Characters: 0</p>
                        </div>
                        <button type="submit" class="btn btn-primary w-100" id="submit-reg-btn">Submit Registration</button> <div class="text-center mt-3">
                            <output id="confirmation" class="text-success fw-bold"></output>
                        </div>
                    </form>
                </section>
            </div>
            <div class="col-md-3 order-md-1 d-none d-md-block"> <aside class="p-4 bg-light rounded shadow-sm h-100">
                    <h4 class="text-primary mb-3">Quick Links</h4>
                    <div class="list-group">
                        <a href="#events" class="list-group-item list-group-item-action">View All Events</a>
                        <a href="#contact" class="list-group-item list-group-item-action">Register Now</a>
                        <a href="#" class="list-group-item list-group-item-action">Event Guidelines</a>
                        <a href="#" class="list-group-item list-group-item-action">FAQs</a>
                    </div>
                    <div class="mt-4">
                        <h5 class="text-primary mb-3">About Us</h5>
                        <p class="text-muted">Dedicated to fostering community engagement through diverse events.</p>
                    </div>
                </aside>
            </div>
        </div>

        <section class="mb-5 p-4 bg-light rounded shadow-sm">
            <h2 class="text-center text-primary mb-4">Watch Our Promo</h2>
            <div class="text-center">
                <video controls oncanplay="showVideoReady()" class="w-100" style="max-width: 600px;">
                    <source src="https://www.w3schools.com/html/mov_bbb.mp4" type="video/mp4">
                    Your browser does not support the video tag.
                </video>
                <p id="videoStatus" class="mt-2 text-muted"></p>
            </div>
        </section>

        <section class="mb-5 p-4 bg-light rounded shadow-sm">
            <h2 class="text-center text-primary mb-4">Find Nearby Events</h2>
            <div class="text-center">
                <button onclick="findLocation()" class="btn btn-success me-2">Find Nearby Events</button>
                <button onclick="clearPrefs()" class="btn btn-secondary">Clear Preferences</button>
                <p id="location" class="mt-3 text-muted"></p>
            </div>
        </section>

    </main>

    <footer class="footer bg-dark text-white py-3 mt-auto position-fixed bottom-0 w-100">
        <div class="container text-center">
            <p class="mb-0">&copy; 2025 City Community Portal</p>
            <div class="mt-2">
                <a href="#" class="text-white me-3"><i class="bi bi-facebook"></i></a>
                <a href="#" class="text-white me-3"><i class="bi bi-twitter"></i></a>
                <a href="#" class="text-white"><i class="bi bi-instagram"></i></a>
            </div>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">


    <div class="modal fade" id="eventDetailsModal" tabindex="-1" aria-labelledby="eventDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="eventDetailsModalLabel">Event Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>More details about the <span id="modalEventName" class="fw-bold"></span> will be displayed here.</p>
                    <p>This is a placeholder for dynamic event information.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Register Now</button>
                </div>
            </div>
        </div>
    </div>

    <script src="main.js"></script>
    <script>
        // JavaScript to update the modal content
        const eventDetailsModal = document.getElementById('eventDetailsModal');
        if (eventDetailsModal) {
            eventDetailsModal.addEventListener('show.bs.modal', event => {
                const button = event.relatedTarget;
                const eventName = button.getAttribute('data-event-name');
                const modalEventName = eventDetailsModal.querySelector('#modalEventName');
                if (modalEventName) {
                    modalEventName.textContent = eventName;
                }
            });
        }
    </script>
</body>
</html>

// Define Event class for Modules 5, 6, 7, 8, 9, 10, 11, 12
class Event {
    constructor(name, date, totalSeats, category) {
        this.name = name;
        this.date = date;
        this.totalSeats = totalSeats;
        this.registered = 0;
        this.category = category;
    }

    checkAvailability() {
        return this.totalSeats - this.registered;
    }

    register() {
        if (this.registered < this.totalSeats) {
            this.registered++;
            return true;
        }
        return false;
    }
}

// Initial events (from Module 6 and 9 examples)
const allEvents = [];
allEvents.push(new Event("Local Food Festival", "2025-06-20", 500, "Food"));
allEvents.push(new Event("Photography Exhibition", "2025-07-01", 100, "Art"));
allEvents.push(new Event("Music Marathon", "2025-08-10", 300, "Music"));
allEvents.push(new Event("Workshop on Baking", "2025-09-05", 20, "Food"));
allEvents.push(new Event("Community Picnic", "2025-06-15", 150, "Social"));

// Constants for form elements
const registrationForm = document.getElementById('registration-form');
const regNameInput = document.getElementById('name');
const regEmailInput = document.getElementById('email');
const regEventSelect = document.getElementById('eventType'); // Use the existing 'eventType' select
const nameError = document.createElement('span'); // Create error message elements
nameError.classList.add('error-message');
regNameInput.after(nameError);

const emailError = document.createElement('span');
emailError.classList.add('error-message');
regEmailInput.after(emailError);

const eventError = document.createElement('span');
eventError.classList.add('error-message');
regEventSelect.after(eventError);

const formStatus = document.getElementById('confirmation'); // Use the existing 'confirmation' output

// Module 1: JavaScript Basics & Setup - window.onload
window.onload = function() {
    console.log("Welcome to the Community Portal");
    alert("The Community Portal page is fully loaded!");

    // Load stored event type (from original HTML script)
    const savedType = localStorage.getItem('eventType');
    if (savedType) document.getElementById('eventType').value = savedType;
    // Initialize fee display if an event type is already selected
    const eventTypeSelect = document.getElementById('eventType');
    if (eventTypeSelect.value) {
        showFee(eventTypeSelect);
    }
    populateEventDropdown(); // Populate dropdown on load (for Modules 11/12)
};

// Module 11/12: Populate event select dropdown
function populateEventDropdown() {
    regEventSelect.innerHTML = '<option value="">--Select an Event--</option>';
    allEvents.forEach(event => {
        const option = document.createElement('option');
        option.value = event.name;
        option.textContent = ${event.name} (${event.checkAvailability()} seats left);
        regEventSelect.appendChild(option);
    });
}

// Functions from original HTML script (Module 2, 3, 5, 8, 11, 13)
function validatePhone(el) {
    if (!/^\d{10}$/.test(el.value) && el.value !== "") {
        alert("Please enter a 10-digit phone number (e.g., 1234567890).");
        el.focus();
    }
}

function showFee(el) {
    const fee = { "Music": "$10", "Art": "$15", "Tech": "$20", "Food": "$5", "Social": "$8" };
    document.getElementById('fee').textContent = Fee: ${fee[el.value] || 'N/A'};
    localStorage.setItem('eventType', el.value);
}

// Renamed from confirmSubmit to handle AJAX submission for Module 12
const MOCK_REGISTRATION_API = 'https://jsonplaceholder.typicode.com/posts'; // Mock API for POST requests

registrationForm.addEventListener('submit', async function(event) {
    event.preventDefault(); // Prevent default form submission

    // Clear previous errors
    nameError.textContent = '';
    emailError.textContent = '';
    eventError.textContent = '';
    formStatus.textContent = '';
    formStatus.style.color = 'black';

    let isValid = true;

    const name = registrationForm.elements.name.value.trim();
    const email = registrationForm.elements.email.value.trim();
    const phone = registrationForm.elements.phone.value.trim();
    const date = registrationForm.elements.date.value;
    const selectedEventName = registrationForm.elements.eventType.value;
    const message = registrationForm.elements.message.value.trim();

    if (name === '') {
        nameError.textContent = 'Name is required.';
        isValid = false;
    }

    if (email === '') {
        emailError.textContent = 'Email is required.';
        isValid = false;
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        emailError.textContent = 'Invalid email format.';
        isValid = false;
    }

    if (selectedEventName === '') {
        eventError.textContent = 'Please select an event.';
        isValid = false;
    }

    if (isValid) {
        formStatus.textContent = 'Submitting registration...';
        formStatus.style.color = 'blue';

        const registrationData = {
            name: name,
            email: email,
            phone: phone,
            eventDate: date,
            eventName: selectedEventName,
            message: message,
            timestamp: new Date().toISOString()
        };

        console.log("Sending registration payload:", registrationData);

        try {
            await new Promise(resolve => setTimeout(resolve, 1500));

            const response = await fetch(MOCK_REGISTRATION_API, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(registrationData),
            });

            console.log("Fetch response received, status:", response.status);

            if (!response.ok) {
                throw new Error(HTTP error! status: ${response.status});
            }

            const responseData = await response.json();
            console.log('Registration successful, response data:', responseData);

            formStatus.textContent = 'Registration successful! Confirmation sent to your email.';
            formStatus.style.color = 'green';

            const eventToUpdate = allEvents.find(e => e.name === selectedEventName);
            if (eventToUpdate) {
                eventToUpdate.register();
            }
            populateEventDropdown();
            registrationForm.reset();
            document.getElementById('fee').textContent = "Fee: N/A";
            document.getElementById('charCount').textContent = "Characters: 0";
        } catch (error) {
            console.error('Registration failed:', error);
            formStatus.textContent = Registration failed: ${error.message};
            formStatus.style.color = 'red';
        }
    } else {
        console.log("Form validation failed.");
        formStatus.textContent = 'Please correct the errors in the form.';
        formStatus.style.color = 'red';
    }
});


function enlargeImage(el) {
    // This function will now apply to images within Bootstrap cards.
    // The visual effect might be limited by the card's overflow or layout.
    // For a better "enlarge image" experience, consider using Bootstrap's Modal for image display.
    if (el.style.width === "300px") {
        el.style.width = "100%"; // Revert to 100% of parent col
        el.style.height = "150px"; // Revert to fixed height
        el.style.zIndex = "1";
        el.style.position = "static";
        el.style.border = "2px solid #ccc";
    } else {
        el.style.width = "300px";
        el.style.height = "auto";
        el.style.zIndex = "10";
        el.style.position = "relative"; // Changed from 'static' to 'relative' to allow z-index
        el.style.border = "3px solid #007bff"; // Highlight on enlarge
    }
}

function countChars(el) {
    document.getElementById('charCount').textContent = Characters: ${el.value.length};
}

function findLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            pos => {
                document.getElementById('location').textContent =
                    Lat: ${pos.coords.latitude.toFixed(4)}, Lon: ${pos.coords.longitude.toFixed(4)};
            },
            err => alert("Geolocation failed: " + err.message),
            { enableHighAccuracy: true }
        );
    } else {
        alert("Geolocation not supported by this browser.");
    }
}

function clearPrefs() {
    localStorage.clear();
    sessionStorage.clear();
    document.getElementById('eventType').value = "";
    document.getElementById('fee').textContent = "Fee: N/A";
    alert("Preferences cleared.");
}

window.onbeforeunload = function() {
    const nameField = document.querySelector('input[name="name"]');
    const emailField = document.querySelector('input[name="email"]');
    if (nameField && emailField && (nameField.value !== '' || emailField.value !== '')) {
        return "You have unsaved changes in the form. Are you sure you want to leave?";
    }
};

function showVideoReady() {
    document.getElementById('videoStatus').textContent = "Video ready to play.";
}

// Module 2: Syntax, Data Types, and Operators (example usage)
const eventName = "Summer Music Festival";
const eventDate = "2025-07-15";
let availableSeats = 100;
const eventInfo = Event: ${eventName}, Date: ${eventDate}, Seats Available: ${availableSeats};
console.log(eventInfo);
availableSeats--;
console.log(Seats after one registration: ${availableSeats});

// Module 3: Conditionals, Loops, and Error Handling (simplified example, full logic is in the form submission)
const today = new Date("2025-05-27");
function registerUser(eventNameToRegister) {
    try {
        const eventToRegister = allEvents.find(event => event.name === eventNameToRegister);
        if (!eventToRegister) {
            throw new Error(Event "${eventNameToRegister}" not found.);
        }
        if (eventToRegister.registered >= eventToRegister.totalSeats) {
            throw new Error(Sorry, "${eventNameToRegister}" is full.);
        }
        eventToRegister.registered++;
        console.log(Successfully registered for ${eventNameToRegister}. Total registered: ${eventToRegister.registered});
    } catch (error) {
        console.error(Registration Error: ${error.message});
    }
}

// Module 4: Functions, Scope, Closures, Higher-Order Functions
function addEvent(name, date, seats, category) {
    allEvents.push(new Event(name, date, seats, category));
    console.log(Event "${name}" added.);
}

function createCategoryRegistrationTracker(category) {
    let totalCategoryRegistrations = 0;
    return function(registrationCount = 1) {
        totalCategoryRegistrations += registrationCount;
        console.log(Total registrations for ${category} category: ${totalCategoryRegistrations});
        return totalCategoryRegistrations;
    };
}
const musicTracker = createCategoryRegistrationTracker("Music");

function filterEvents(eventsList, filterCondition) {
    return eventsList.filter(filterCondition);
}

/* Custom CSS for Bootstrap overrides and specific elements */

/* Body background styling - Keep your original for consistent look */
body {
    background-image: url('https://via.placeholder.com/1920x1080/ADD8E6/FFFFFF?text=Community+Background');
    background-color: #add8e6; /* Fallback color for background */
    background-size: cover;
    background-attachment: fixed;
    /* Ensure body has min-height to allow fixed footer to work correctly with content */
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

/* Ensure main content pushes footer down */
main {
    flex: 1;
}

/* Original nav styling - mostly replaced by Bootstrap navbar */
/* Removed most of the original nav styles as Bootstrap handles it */

/* Original table styling - Bootstrap has its own table classes */
/* Keeping for your gallery table, but consider Bootstrap's .table class for data tables */
.gallery {
    width: 100%;
    border-collapse: separate; /* Keep separate to allow border-spacing */
    border-spacing: 15px; /* Keep spacing for image gallery */
    margin-top: 20px;
}
.gallery caption {
    margin-bottom: 15px;
    font-weight: bold;
    font-size: 1.1em;
}
.gallery img {
    border: 2px solid #ccc;
    /* Bootstrap's img-fluid might be better, but keeping original for specific double-click effect */
    width: 100%; /* Make images responsive within their card */
    height: 150px; /* Fixed height for consistency in gallery */
    object-fit: cover; /* Ensure images cover the area without distortion */
    display: block;
    margin: auto;
    transition: transform 0.2s ease-in-out;
}
.gallery img:hover {
    transform: scale(1.05);
}

/* Adjustments for the image enlarge function to work with Bootstrap grid/cards */
/* This requires position: relative on the parent .card for position: absolute on enlarged image */
/* Or, adjust enlargeImage JS to use Bootstrap modal for enlarged view for a better UX */
/* For now, keeping the original logic, which might look odd with card boundaries */


/* Custom styles for original elements that might be useful */
#welcomeBanner {
    /* Background and shadow are now handled by Bootstrap classes directly in HTML */
    padding: 20px;
    margin-bottom: 30px;
    border-radius: 8px;
}
.highlight {
    background-color: yellow;
    padding: 2px 5px;
}

/* Override Bootstrap's form-control default width if needed, but flex handles it well */
form input:focus,
select:focus,
textarea:focus {
    outline: 2px solid var(--bs-primary); /* Use Bootstrap primary color variable */
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25); /* Mimic Bootstrap focus ring */
}

/* Original typography from styles.css */
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');

body {
    font-family: 'Roboto', sans-serif;
    font-size: 16px;
}

section p {
    text-align: justify;
    text-transform: none;
    letter-spacing: 0.5px;
    line-height: 1.8;
}

/* Original h1 font-weight (now also applied via Bootstrap fw-bold) */
h1 {
    font-weight: 700;
    font-style: normal;
}

/* Responsive Web Design with Media Queries - Adapt for Bootstrap breakpoints */
/* Bootstrap handles most responsiveness, but if you have specific needs outside Bootstrap's defaults, keep these */
@media screen and (max-width: 768px) {
    /* Bootstrap's navbar-expand-lg handles nav collapsing automatically */
    /* Images within cards are already responsive due to card-img-top and img-fluid-like behavior */
    .gallery img {
        height: auto; /* Allow height to adjust on smaller screens */
    }

    body {
        font-size: 14px;
    }

    .news-article { /* If you reintroduce a news-article section */
        column-count: 1;
    }
}

/* Fixed footer margin if it overlaps content (unlikely with .mt-auto) */
body {
    padding-bottom: 60px; /* Adjust based on footer height */
}
.footer {
    height: 60px; /* Example height, adjust as needed */
}
