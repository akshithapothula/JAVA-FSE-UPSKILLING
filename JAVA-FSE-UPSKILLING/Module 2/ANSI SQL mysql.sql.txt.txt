
-- 1. User Upcoming Events
-- Show a list of all upcoming events a user is registered for in their city, sorted by date.
SELECT
  U.full_name,
  E.title AS event_title,
  E.start_date,
  E.city AS event_city
FROM Users AS U
JOIN Registrations AS R
  ON U.user_id = R.user_id
JOIN Events AS E
  ON R.event_id = E.event_id
WHERE
  E.status = 'upcoming' AND U.city = E.city
ORDER BY
  E.start_date;

-- 2. Top Rated Events
-- Identify events with the highest average rating, considering only those that have received at least 10 feedback submissions.
SELECT
  E.title AS event_title,
  AVG(F.rating) AS average_rating,
  COUNT(F.feedback_id) AS feedback_count
FROM Events AS E
JOIN Feedback AS F
  ON E.event_id = F.event_id
GROUP BY
  E.event_id,
  E.title
HAVING
  COUNT(F.feedback_id) >= 10
ORDER BY
  average_rating DESC;

-- 3. Inactive Users
-- Retrieve users who have not registered for any events in the last 90 days.
SELECT
  U.full_name,
  U.email
FROM Users AS U
LEFT JOIN Registrations AS R
  ON U.user_id = R.user_id
WHERE
  R.registration_id IS NULL OR R.registration_date < CURDATE() - INTERVAL 90 DAY
GROUP BY
  U.user_id,
  U.full_name,
  U.email
HAVING
  MAX(R.registration_date) IS NULL OR MAX(R.registration_date) < CURDATE() - INTERVAL 90 DAY;

-- 4. Peak Session Hours
-- Count how many sessions are scheduled between 10 AM to 12 PM for each event.
SELECT
  E.title AS event_title,
  COUNT(S.session_id) AS session_count_10_12_pm
FROM Events AS E
JOIN Sessions AS S
  ON E.event_id = S.event_id
WHERE
  TIME(S.start_time) >= '10:00:00' AND TIME(S.start_time) < '12:00:00'
GROUP BY
  E.event_id,
  E.title;

-- 5. Most Active Cities
-- List the top 5 cities with the highest number of distinct user registrations.
SELECT
  U.city,
  COUNT(DISTINCT R.user_id) AS distinct_registrations
FROM Users AS U
JOIN Registrations AS R
  ON U.user_id = R.user_id
GROUP BY
  U.city
ORDER BY
  distinct_registrations DESC
LIMIT 5;

-- 6. Event Resource Summary
-- Generate a report showing the number of resources (PDFs, images, links) uploaded for each event.
SELECT
  E.title AS event_title,
  SUM(CASE WHEN R.resource_type = 'pdf' THEN 1 ELSE 0 END) AS pdf_count,
  SUM(CASE WHEN R.resource_type = 'image' THEN 1 ELSE 0 END) AS image_count,
  SUM(CASE WHEN R.resource_type = 'link' THEN 1 ELSE 0 END) AS link_count,
  COUNT(R.resource_id) AS total_resources
FROM Events AS E
LEFT JOIN Resources AS R
  ON E.event_id = R.event_id
GROUP BY
  E.event_id,
  E.title
ORDER BY
  E.title;

-- 7. Low Feedback Alerts
-- List all users who gave feedback with a rating less than 3, along with their comments and associated event names.
SELECT
  U.full_name AS user_name,
  F.rating,
  F.comments,
  E.title AS event_name
FROM Feedback AS F
JOIN Users AS U
  ON F.user_id = U.user_id
JOIN Events AS E
  ON F.event_id = E.event_id
WHERE
  F.rating < 3;

-- 8. Sessions per Upcoming Event
-- Display all upcoming events with the count of sessions scheduled for them.
SELECT
  E.title AS event_title,
  COUNT(S.session_id) AS session_count
FROM Events AS E
LEFT JOIN Sessions AS S
  ON E.event_id = S.event_id
WHERE
  E.status = 'upcoming'
GROUP BY
  E.event_id,
  E.title
ORDER BY
  E.title;

-- 9. Organizer Event Summary
-- For each event organizer, show the number of events created and their current status (upcoming, completed, cancelled).
SELECT
  U.full_name AS organizer_name,
  E.status AS event_status,
  COUNT(E.event_id) AS number_of_events
FROM Users AS U
JOIN Events AS E
  ON U.user_id = E.organizer_id
GROUP BY
  U.user_id,
  U.full_name,
  E.status
ORDER BY
  organizer_name,
  event_status;

-- 10. Feedback Gap
-- Identify events that had registrations but received no feedback at all.
SELECT
  E.title AS event_title
FROM Events AS E
JOIN Registrations AS R
  ON E.event_id = R.event_id
LEFT JOIN Feedback AS F
  ON E.event_id = F.event_id
WHERE
  F.feedback_id IS NULL
GROUP BY
  E.event_id,
  E.title;

-- 11. Daily New User Count
-- Find the number of users who registered each day in the last 7 days.
SELECT
  registration_date,
  COUNT(user_id) AS new_user_count
FROM Users
WHERE
  registration_date >= CURDATE() - INTERVAL 7 DAY
GROUP BY
  registration_date
ORDER BY
  registration_date;

-- 12. Event with Maximum Sessions
-- List the event(s) with the highest number of sessions.
SELECT
  E.title AS event_title,
  COUNT(S.session_id) AS session_count
FROM Events AS E
JOIN Sessions AS S
  ON E.event_id = S.event_id
GROUP BY
  E.event_id,
  E.title
ORDER BY
  session_count DESC
LIMIT 1;

-- 13. Average Rating per City
-- Calculate the average feedback rating of events conducted in each city.
SELECT
  E.city,
  AVG(F.rating) AS average_rating
FROM Events AS E
JOIN Feedback AS F
  ON E.event_id = F.event_id
GROUP BY
  E.city
ORDER BY
  E.city;

-- 14. Most Registered Events
-- List top 3 events based on the total number of user registrations.
SELECT
  E.title AS event_title,
  COUNT(R.registration_id) AS total_registrations
FROM Events AS E
JOIN Registrations AS R
  ON E.event_id = R.event_id
GROUP BY
  E.event_id,
  E.title
ORDER BY
  total_registrations DESC
LIMIT 3;

-- 15. Event Session Time Conflict
-- Identify overlapping sessions within the same event (i.e., session start and end times that conflict).
SELECT
  S1.event_id,
  E.title AS event_title,
  S1.session_id AS session1_id,
  S1.title AS session1_title,
  S1.start_time AS session1_start,
  S1.end_time AS session1_end,
  S2.session_id AS session2_id,
  S2.title AS session2_title,
  S2.start_time AS session2_start,
  S2.end_time AS session2_end
FROM Sessions AS S1
JOIN Sessions AS S2
  ON S1.event_id = S2.event_id AND S1.session_id < S2.session_id
JOIN Events AS E
  ON S1.event_id = E.event_id
WHERE
  (S1.start_time < S2.end_time AND S1.end_time > S2.start_time);

-- 16. Unregistered Active Users
-- Find users who created an account in the last 30 days but haven't registered for any events.
SELECT
  U.full_name,
  U.email,
  U.registration_date
FROM Users AS U
LEFT JOIN Registrations AS R
  ON U.user_id = R.user_id
WHERE
  U.registration_date >= CURDATE() - INTERVAL 30 DAY AND R.registration_id IS NULL;

-- 17. Multi-Session Speakers
-- Identify speakers who are handling more than one session across all events.
SELECT
  speaker_name,
  COUNT(session_id) AS number_of_sessions
FROM Sessions
GROUP BY
  speaker_name
HAVING
  COUNT(session_id) > 1;

-- 18. Resource Availability Check
-- List all events that do not have any resources uploaded.
SELECT
  E.title AS event_title
FROM Events AS E
LEFT JOIN Resources AS R
  ON E.event_id = R.event_id
WHERE
  R.resource_id IS NULL;

-- 19. Completed Events with Feedback Summary
-- For completed events, show total registrations and average feedback rating.
SELECT
  E.title AS event_title,
  COUNT(DISTINCT R.registration_id) AS total_registrations,
  AVG(F.rating) AS average_feedback_rating
FROM Events AS E
LEFT JOIN Registrations AS R
  ON E.event_id = R.event_id
LEFT JOIN Feedback AS F
  ON E.event_id = F.event_id
WHERE
  E.status = 'completed'
GROUP BY
  E.event_id,
  E.title;

-- 20. User Engagement Index
-- For each user, calculate how many events they attended and how many feedbacks they submitted.
SELECT
  U.full_name AS user_name,
  COUNT(DISTINCT R.event_id) AS events_attended,
  COUNT(DISTINCT F.feedback_id) AS feedback_submitted
FROM Users AS U
LEFT JOIN Registrations AS R
  ON U.user_id = R.user_id
LEFT JOIN Feedback AS F
  ON U.user_id = F.user_id
GROUP BY
  U.user_id,
  U.full_name
ORDER BY
  user_name;

-- 21. Top Feedback Providers
-- List top 5 users who have submitted the most feedback entries.
SELECT
  U.full_name AS user_name,
  COUNT(F.feedback_id) AS feedback_count
FROM Users AS U
JOIN Feedback AS F
  ON U.user_id = F.user_id
GROUP BY
  U.user_id,
  U.full_name
ORDER BY
  feedback_count DESC
LIMIT 5;

-- 22. Duplicate Registrations Check
-- Detect if a user has been registered more than once for the same event.
SELECT
  user_id,
  event_id,
  COUNT(registration_id) AS registration_count
FROM Registrations
GROUP BY
  user_id,
  event_id
HAVING
  COUNT(registration_id) > 1;

-- 23. Registration Trends
-- Show a month-wise registration count trend over the past 12 months.
SELECT
  DATE_FORMAT(registration_date, '%Y-%m') AS registration_month,
  COUNT(registration_id) AS registration_count
FROM Registrations
WHERE
  registration_date >= CURDATE() - INTERVAL 12 MONTH
GROUP BY
  registration_month
ORDER BY
  registration_month;

-- 24. Average Session Duration per Event
-- Compute the average duration (in minutes) of sessions in each event.
SELECT
  E.title AS event_title,
  AVG(TIMESTAMPDIFF(MINUTE, S.start_time, S.end_time)) AS average_session_duration_minutes
FROM Events AS E
JOIN Sessions AS S
  ON E.event_id = S.event_id
GROUP BY
  E.event_id,
  E.title
ORDER BY
  E.title;

-- 25. Events Without Sessions
-- List all events that currently have no sessions scheduled under them.
SELECT
  E.title AS event_title
FROM Events AS E
LEFT JOIN Sessions AS S
  ON E.event_id = S.event_id
WHERE
  S.session_id IS NULL;
